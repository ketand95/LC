109 . Trees , This is a very naive approach (converting it to an array part  and dealing with). Time Complexity : O(n) , 
Anyway we are dealing with a list , so I figured why to waste time on a fancy approach as we can't optimize the TC better than what I have achieved.  

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
# Definition for a binary tree node.
# class TreeNode:
#     def __init__(self, val=0, left=None, right=None):
#         self.val = val
#         self.left = left
#         self.right = right
class Solution:
    def sortedListToBST(self, head: ListNode) -> TreeNode:
        a = []
        while head :
            a.append(head.val)
            head = head.next
        return self.createTree(a)    
       
    def createTree(self, a):
        if not a :
            return None
        mid = len(a)//2
        tree = TreeNode(a[mid])
        tree.left = self.createTree(a[:mid])
        tree.right = self.createTree(a[mid+1:])
        return tree